cmake_minimum_required(VERSION 3.5)
set(USE_GNU_COMPILER FALSE CACHE BOOL "Compiler")

# Indicate the directory where the stm32.cmake are
set(STM32_CMAKE_FOLDER ${CMAKE_CURRENT_LIST_DIR}/stm32_cmake)

set(CMAKE_MODULE_PATH  ${CMAKE_MODULE_PATH}
        ${STM32_CMAKE_FOLDER})

# Include the stm32xx module here
include(stm32f0)

# Set the Project Name
set(PROJECT_NAME "Project-Name")


# Give a short name for the project
set(SHORT_PROJECT_NAME "PROJ")


project(${PROJECT_NAME})


string(TIMESTAMP BUILD_DATE "%Y%m%d")

execute_process(
        COMMAND git rev-parse --abbrev-ref HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_BRANCH
        OUTPUT_STRIP_TRAILING_WHITESPACE
)


# Get the latest abbreviated commit hash of the working branch
execute_process(
        COMMAND git log -1 --format=%h
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_COMMIT_HASH
        OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
        COMMAND git status --porcelain
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_STATUS
        OUTPUT_STRIP_TRAILING_WHITESPACE
)

STRING(REGEX REPLACE "/" "." GIT_BRANCH2 ${GIT_BRANCH})




if (NOT GIT_STATUS STREQUAL "")
    message(STATUS "Changes are not yet commited")
    set(GIT_IS_DEV 1)
    set(BUILD_INFO D${BUILD_DATE}-${GIT_COMMIT_HASH})
    set(FILENAME ${BUILD_DATE}-DEV_${SHORT_PROJECT_NAME}${NAME_EXT}_${GIT_COMMIT_HASH}-${GIT_BRANCH2})

else()
    message(STATUS "Changes committed to ${GIT_BRANCH} with hash: ${GIT_COMMIT_HASH}")
    set(BUILD_INFO ${BUILD_DATE}-${GIT_COMMIT_HASH})
    set(GIT_IS_DEV 0)
    set(FILENAME ${BUILD_DATE}-${SHORT_PROJECT_NAME}${NAME_EXT}_${GIT_COMMIT_HASH}-${GIT_BRANCH2})
endif()


# Include cmake files for the project
include(definitions.cmake)
include(mxcube.cmake)
# include(project.cmake)

message(STATUS "Build filename: ${FILENAME}")

set(OBJ_NAME "${CMAKE_SOURCE_DIR}/bin/${FILENAME}")

add_executable(${PROJECT_NAME} ${SOURCES})

SET_COMPILER_OPTIONS(${PROJECT_NAME})

STM32_ADD_HEX_BIN_TARGETS(${PROJECT_NAME} ${OBJ_NAME})

STM32_PRINT_SIZE_OF_TARGETS(${PROJECT_NAME})

STM32_FLASH_TARGET(${PROJECT_NAME})

target_link_libraries(${PROJECT_NAME} PUBLIC ${LIBRARIES})
